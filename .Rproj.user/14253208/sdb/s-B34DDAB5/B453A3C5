{
    "collab_server" : "",
    "contents" : "############## Notes to self ###############################################\n#Missing data handled: Summary\n#Yet to handle missing data for: Location, Race, Latitude, Longitude\n#Columns that have been split: \n  #Location -> City, State\n  #Date -> Day, Month, Year\n#Columns that have been standardized: Gender, Race, Mental.Health.Issues\n#Columns that need to be standardized: \n#The categorical columns can be factored in one line\n  #cols_to_factors<-c(\"Mental.Health.Issues\", \"Race\", \"Gender\")\n  #mass.shootings[,cols_to_factors]<-lapply(mass.shootings[,cols_to_factors],as.factor)\n#Row 144, 161, 173, 222, 238\n#mass.shootings2[c(144, 173, 222, 238), c(\"Location\", \"City\", \"State\")]\n#Replace DC as Washington in State\n################################################################################\n\n#Installing the essentials\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(maps)\nlibrary(zipcode)\nlibrary(RJSONIO)\n################################################################################\n\n\n#Importing data\ndataset <- read.csv(\"Mass Shootings Dataset Ver 2.csv\", \n                    header = T, stringsAsFactors = F, na.strings = '')\n\n################################################################################\n\n\n#Foreplaying with data\nView(dataset)\ncolnames(dataset)\nhead(dataset,20)\nsummary(dataset)\nstr(dataset$Date)\n\n#Missing Values\nsum(is.na(dataset))\nsapply(dataset, function(x) sum(is.na(x)))\n\n#Handled the missing data in the summary column\ndataset$Summary[is.na(dataset$Summary)] <- \"Unknown\"\n\n#Peeking at Date\nhead(dataset$Date, 150)\n\n####################### Extracting Year, Month, Day from Date ###############################\nclass(dataset$Date)\ndataset$Date <- testdata$Date\ndataset$Date <- sapply(dataset$Date,\n                       FUN= function(x) gsub(pattern = \"-\",replacement = \"\\\\/\",\n                                             x = x))\n\ndataset$Year <- year(as.Date(dataset$Date,format = '%m/%d/%Y'))\ndataset$Month <- month(as.Date(dataset$Date,format = '%m/%d/%Y'))\ndataset$Day <- day(as.Date(dataset$Date,format = '%m/%d/%Y'))\n\nView(select(dataset,Date, Year, Month, Day))\n################################################################################\n\n############## Splitting Location into City and State ########################\nArea <- sapply(dataset$Location, \n               FUN=function(x) str_split(string = x, pattern = \", \", \n                                         n = 2, simplify = TRUE))\n\ndataset$City <- Area[1,]\ndataset$State <- Area[2,]\n\nView(select(dataset, Location, City, State))\ndataset[dataset$State]\nsum(is.na(dataset$Location))\nsum(is.na(dataset$State))\nsum(is.na(dataset$City))\n\n################################################################################\n\n#################  Dealing with Misssing Values of Location  ####################\nsum(is.na(dataset$Location))\nView(select(dataset, Title,Location, State, City, Latitude, Longitude))\ngeography_dataset <- select(dataset,Title, Location, State, City, Latitude, Longitude)\nmissing_location <- geography_dataset[is.na(geography_dataset$Location), \n                                      c(\"Title\",\"Location\", \"State\", \"City\", \"Latitude\",\"Longitude\" )]\n\nmissing_location$Location <-NA\nmissing_location$State <- NA\nmissing_location$City <- NA \n\nrepeat {\n  for (i in 1:nrow(missing_location)) {\n    if (is.na(missing_location$Location[i])){\n      missing_location$Location[i] <- revgeocode(as.numeric(missing_location[i,c(\"Longitude\", \"Latitude\")]))\n      print(paste(\"missing data for\", sum(is.na(missing_location$Location)), \"rows\"))\n    } \n  }\n  if (sum(is.na(missing_location$Location))==0){break}\n}\n\n\n\nfor (i in 1:nrow(missing_location)){\n  state <- strsplit(missing_location$Location[i], \", \")[[1]][3][1]\n  missing_location$State[i] <- gsub(\"[[:digit:]]+\", \"\", state)\n  missing_location$City[i] <- strsplit(missing_location$Location[i], \", \")[[1]][2][1]\n}\n\nmissing_location$Location <- as.character(missing_location$Location)\nmissing_location$State <- as.character(missing_location$State)\nmissing_location$City <- as.character(missing_location$City)\n\nsum(is.na(missing_location$Location))\nsum(is.na(missing_location$State))\nsum(is.na(missing_location$City))\n\n\n###############################################################################\n\n\n################# Merging the newly filled Location data ################################\n\n\nmatched <- match(missing_location$Title, dataset$Title)\nmatched\ndataset[matched, c(\"Location\", \"City\", \"State\")] <- missing_location[, c(\"Location\", \"City\", \"State\")]\n\nsum(is.na(dataset$Location))\nsum(is.na(dataset$State))\nsum(is.na(dataset$City))\n\n####################### Dealing with abnormal data in City and State ##################\n\nwashington<-which(dataset$Location==\"Washington D.C.\")\nwashington\ndataset$City[washington] <- strsplit(dataset$Location[washington], \" \")[[1]][[1]]\ndataset$State[washington] <- strsplit(dataset$Location[washington], \" \")[[1]][[2]]\n\ndataset$State[dataset$State=='D.C.'] <- 'Washington'\ndataset$state.fullname[dataset$City=='Washington'] <- 'Washington'\ndataset$state.abbreviated[dataset$City=='Washington'] <- \"WA\"\n\n\n#Extracting the last word from State for abnormal states observed in 144, 173, 222, 238 and \n#trimming spaces\nfor (i in 1:nrow(dataset)){\n  dataset$State[i] <- sub('.*,\\\\s', '', dataset$State[i])\n  dataset$State[i] <- str_trim(dataset$State[i])\n}\n\n#Standardizing State names\n\n#Funtion that converts abbr to full and vice versa\n#Source: https://gist.github.com/ligyxy/acc1410041fe2938a2f5\n\nabb2state <- function(name, convert = F, strict = F){\n  data(state)\n  # state data doesn't include DC\n  state = list()\n  state[['name']] = c(state.name,\"District Of Columbia\")\n  state[['abb']] = c(state.abb,\"DC\")\n  \n  if(convert) state[c(1,2)] = state[c(2,1)]\n  \n  single.a2s <- function(s){\n    if(strict){\n      is.in = tolower(state[['abb']]) %in% tolower(s)\n      ifelse(any(is.in), state[['name']][is.in], NA)\n    }else{\n      # To check if input is in state full name or abb\n      is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how=\"list\")\n      state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]\n    }\n  }\n  sapply(name, single.a2s)\n}\n\nfor (i in 1:nrow(dataset)){\n  dataset$state.abbreviated[i] <- abb2state(dataset$State[i], convert=T)\n  dataset$state.fullname[i]<- abb2state(dataset$State[i])\n}\n \n###############################################################################\n\n############## Gender ########################\nunique(dataset$Gender)\ntable(dataset$Gender)\n\ndataset$Gender[dataset$Gender=='M'] <- \"Male\"\ndataset$Gender[dataset$Gender=='M/F'] <- \"Male/Female\"\ndataset$Gender[is.na(dataset$Gender)] <- \"Unknown\"\n\ndataset$Gender <- as.factor(dataset$Gender)\nlevels(dataset$Gender)\n######################################################\n\n\n\n###########  Race  ###############\nunique(dataset$Race)\ntable(dataset$Race)\ndataset$Race[is.na(dataset$Race) | dataset$Race=='unclear'] <- \"Unknown\"\ndataset$Race[dataset$Race=='unclear'] <- \"Unknown\"\ndataset$Race[dataset$Race=='White ' | dataset$Race=='white'| dataset$Race== \"White\"]<-  \"White American or European American\"\ndataset$Race[dataset$Race=='black' | dataset$Race=='Black'|\n               dataset$Race=='Black American or African American/Unknown' ] <- \"Black American or African American\"\ndataset$Race[dataset$Race=='Some other race'] <- \"Other\"\ndataset$Race[dataset$Race=='Asian' | dataset$Race=='Asian American'] <- \"Asian or American\"\ndataset$Race[dataset$Race=='Asian American/Some other race' |\n             dataset$Race=='White American or European American/Some other Race'] <- \"Two or more races\"\n\n######################################################\n\n\n############### Mental Health Issues #########################\nunique(dataset$Mental.Health.Issues)\ndataset$Mental.Health.Issues[dataset$Mental.Health.Issues == 'unknown' |\n                               dataset$Mental.Health.Issues == 'Unclear '] <- 'Unknown'\n\ndataset$Mental.Health.Issues <- as.factor(dataset$Mental.Health.Issues)\nlevels(dataset$Mental.Health.Issues)\n###########################################################################\n\n\n###################  Factoring columns #####################################\ncols_to_factors <- c(\"Mental.Health.Issues\", \"Race\", \"Gender\")\ndataset[,cols_to_factors] <- lapply(dataset[,cols_to_factors],as.factor)\nstr(dataset)\n\ndataset$State <- as.factor(dataset$State)\n\ndataset$state.abbreviated <- unlist(dataset$state.abbreviated)\ndataset$state.abbreviated <- as.factor(dataset$state.abbreviated)\ndataset$state.fullname <- unlist(dataset$state.fullname)\ndataset$state.fullname <- as.factor(dataset$state.fullname)\n\n###########################################################################\n\n############ Math error in Total Victims ################################################\nmath_error <- which(dataset$Total.victims != dataset$Fatalities + dataset$Injured)\nmath_error\nView(dataset[math_error, c(\"Injured\", \"Fatalities\", \"Total.victims\")])\ndataset$Total.victims[math_error] <- rowSums(dataset[math_error, c(\"Injured\", \"Fatalities\")])  \n\n#Check if the mismatch still exists\nmath_error <- which(dataset$Total.victims != dataset$Fatalities + dataset$Injured)\nmath_error\n\n\n###########################################################################\n\n\n##################  Removing Duplicate Rows based on Date and State ###########\nduplicate_indexes <- which(duplicated(dataset[c('Date', 'State')]),)\nduplicate_indexes\ndataset <- dataset[!duplicated(dataset[c('Date', 'State')]),]\nView(dataset)\n",
    "created" : 1509337643864.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "522564890",
    "id" : "B453A3C5",
    "lastKnownWriteTime" : 1509520244,
    "last_content_update" : 1509520244693,
    "path" : "D:/Learning/Data Science/Kaggle/US Mass Shootings/script.R",
    "project_path" : "script.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}