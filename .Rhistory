z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
c(1,2,3,4) + c(0,10, 1000)
c(1,2,3,4) + c(0,10, 100)
z*2+1000
my_div
getwd()
ls()
x <-9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("testdir/mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", 'folder1', 'folder2')
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2/testdir3", recursive = T)
dir.create(file.path("testdir2","testdir3"), recursive = T)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char,collapse = " ")
c(my_char, "Saurabh")
my_name <- c(my_char, "Saurabh")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,sep="")
paste(1:3,c("X","Y", "Z", sep="")
)
paste(1:3,c("X","Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x
x*3
y <rnorm(1000)
y <- rnorm(1000)
z <- rep(NA, times = 1000)
z <- rep(NA, 1000)
?sample
z <- sample(c(y,z), 100)
z <- sample(c(y, z), 100)
my_data <- sample(c(y,z), 100)
my_na <- my_data.is.na()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf -Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[-c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo=11, bar=2,norf=NA)
vect
names(vect)
vect <- c(11,2,NA)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) < c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data, cnames)
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
bye()
swirl()
library(swirl)
swirl()
submit()
bye()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes[,19:23]
flag_shapes<- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_val
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$population, summary)
tapply(flags$population, flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size()
object.size(plants)
names(plants)
head(plants)
head(plants, n=10)
tail(plants, n =15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace = F)
sample(1:6,4, replace = T)
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1), size=10, replace = T, prob = c(0.3,0.7))
flips<- sample(c(0,1), size=100, replace = T, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinorm
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom(c(0,1), size=100, prob = c(0.7))
flip2 <- rbinom(100, size=1, prob = 0.7)
flips2 <- rbinom(100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, lambda = 10))
my_pois <- replicate(100, rpois(5, 10))
mu_pois
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab="Stopping Distance", main="My Plot")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab="Stopping Distance", main="My Plot")
plot(cars, main = "My Plot")
plot(cars, sub="My Plot Subtitle"
)
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
quit
quit()
?pnorm
pnorm(q= 1800, mean = 1500, sd = 300)
percent_var <- pnorm(q= 1800, mean = 1500, sd = 300)
percent_var*100
1-percen_var
1-percent_var
(1-percent_var)*100
4/5
percent_var <- pnorm(q= 24, mean = 21, sd = 5)
percent_var
3/5
qnorm(sd= 5, mean = 21, q=0.90)
qnorm(q=0.90, sd= 5, mean = 21)
qnorm(0.90, 21, 5)
qnorm(0.10, 21, 5)
pnorm(50, mean=45, sd=3.2)
dt <- pnorm(50, mean=45, sd=3.2)
dad <- 1-dt
dad
getwd()
setwd("D://Learning//Data Science//R//R Practice")
getwd()
qnorm(.98)
re <- (1-0.98)/2
re
qnorm(re)
pwd()
getwd()
fan = 3
clock = 2
star = 10 #Taking sum of sides
fan + clock + star
fan + clock * star
library(caret)
data("mtcars")
?createDataPartition
View(mtcars)
split <- createDataPartition(mtcars$mpg, p=0.7,list = F)
head(split)
split <- createDataPartition(mtcars$mpg, p=0.7,list = T)
head(Split)
head(slit)
head(split)
split <- createDataPartition(mtcars$mpg, p=0.7,list = F)
head(split)
dev <- mtcars[split,]
val <- mtcars[!split,]
val <- mtcars[~split,]
val <- mtcars[-split,]
View(dev)
View(val)
?train
names(getModelInfo())
lmfit <- train(data=dev, mpg~.,method="lm")
lmfit
summary(lmfit)
?trainControl
ctrl <- trainControl(method = 'cv', number = 10)
?train
data(iris)
View(iris)
unique(iris$Species)
?matrix
testmatrix <- matrix(diag(x=1),nrow=5, ncol= 5)
testmatrix <- diag(x=1,nrow=5, ncol= 5)
(testmatrix <- diag(x=1,nrow=5, ncol= 5))
identiy_matrix <- function A (
(testmatrix <- diag(x=1,nrow=5, ncol= 5))
)
identiy_matrix <- function A() {
(testmatrix <- diag(x=1,nrow=5, ncol= 5))
}
red.plot <- function(x, y, ...) {
plot(x, y, col="red", ...)
}
A <- function() {
testmatrix <- diag(x=1,nrow=5, ncol= 5)
}
A()
A
A <- function() {
diag(x=1,nrow=5, ncol= 5)
}
A()
#In the exercise, we will write a function that outputs a 5*5 Identity Matrix
A <- function() {
diag(x=1,nrow=5, ncol= 5)
}
A()
IdentityMatrix <- function() {
diag(x=1,nrow=5, ncol= 5)
}
IdentityMatrix()
pwd()
getwd()
swirl()
library(swirl)
vignette("tibble")
?vignette
vignette("tibble")
combn(letters[1:4], 2)
(m <- combn(10, 5, min))   # minimum value in each combination
mm <- combn(15, 6, function(x) matrix(x, 2, 3))
stopifnot(round(choose(10, 5)) == length(m),
c(2,3, round(choose(15, 6))) == dim(mm))
m
mm
stopifnot(round(choose(10, 5)) == length(m),
c(2,3, round(choose(15, 6))) == dim(mm))
combn(c(1,1,1,1,2,2,2,3,3,4), 3, tabulate, nbins = 4)
N   <- 5
vec <- c(-1, 1)
lst <- lapply(numeric(N), function(x) vec)
as.matrix(expand.grid(lst))
N   <- 5
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
as.matrix(expand.grid(lst))
N   <- 3
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
as.matrix(expand.grid(lst))
setwd("D:/Learning/Data Science/Kaggle/US Mass Shootings")
library(tidyverse)
library(lubridate)
library(stringr)
library(maps)
library(zipcode)
library(RJSONIO)
dataset <- read.csv("Mass Shootings Dataset Ver 2.csv",
header = T, stringsAsFactors = F, na.strings = '')
dataset$Summary[is.na(dataset$Summary)] <- "Unknown"
dataset$Date <- sapply(dataset$Date,
FUN= function(x) gsub(pattern = "-",replacement = "\\/",
x = x))
dataset$Year <- year(as.Date(dataset$Date,format = '%m/%d/%Y'))
dataset$Month <- month(as.Date(dataset$Date,format = '%m/%d/%Y'))
dataset$Day <- day(as.Date(dataset$Date,format = '%m/%d/%Y'))
Area <- sapply(dataset$Location,
FUN=function(x) str_split(string = x, pattern = ", ",
n = 2, simplify = TRUE))
dataset$City <- Area[1,]
dataset$State <- Area[2,]
geography_dataset <- select(dataset,Title, Location, State, City, Latitude, Longitude)
missing_location <- geography_dataset[is.na(geography_dataset$Location),
c("Title","Location", "State", "City", "Latitude","Longitude" )]
missing_location$Location <-NA
missing_location$State <- NA
missing_location$City <- NA
repeat {
for (i in 1:nrow(missing_location)) {
if (is.na(missing_location$Location[i])){
missing_location$Location[i] <- revgeocode(as.numeric(missing_location[i,c("Longitude", "Latitude")]))
print(paste("missing data for", sum(is.na(missing_location$Location)), "rows"))
}
if (sum(is.na(missing_location$Location))==0){break}
}
library(ggmap)
repeat {
for (i in 1:nrow(missing_location)) {
if (is.na(missing_location$Location[i])){
missing_location$Location[i] <- revgeocode(as.numeric(missing_location[i,c("Longitude", "Latitude")]))
print(paste("missing data for", sum(is.na(missing_location$Location)), "rows"))
}
if (sum(is.na(missing_location$Location))==0){break}
}
for (i in 1:nrow(missing_location)){
state <- strsplit(missing_location$Location[i], ", ")[[1]][3][1]
missing_location$State[i] <- gsub("[[:digit:]]+", "", state)
missing_location$City[i] <- strsplit(missing_location$Location[i], ", ")[[1]][2][1]
}
missing_location$Location <- as.character(missing_location$Location)
missing_location$State <- as.character(missing_location$State)
missing_location$City <- as.character(missing_location$City)
sum(is.na(missing_location$Location))
sum(is.na(missing_location$State))
sum(is.na(missing_location$City))
matched <- match(missing_location$Title, dataset$Title)
matched
dataset[matched, c("Location", "City", "State")] <- missing_location[, c("Location", "City", "State")]
sum(is.na(dataset$Location))
sum(is.na(dataset$State))
sum(is.na(dataset$City))
washington<-which(dataset$Location=="Washington D.C.")
washington
dataset$City[washington] <- strsplit(dataset$Location[washington], " ")[[1]][[1]]
dataset$State[washington] <- strsplit(dataset$Location[washington], " ")[[1]][[2]]
dataset$State[dataset$State=='D.C.'] <- 'Washington'
dataset$state.fullname[dataset$City=='Washington'] <- 'Washington'
dataset$state.abbreviated[dataset$City=='Washington'] <- "WA"
for (i in 1:nrow(dataset)){
dataset$State[i] <- sub('.*,\\s', '', dataset$State[i])
dataset$State[i] <- str_trim(dataset$State[i])
}
abb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia")
state[['abb']] = c(state.abb,"DC")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
sapply(name, single.a2s)
}
for (i in 1:nrow(dataset)){
dataset$state.abbreviated[i] <- abb2state(dataset$State[i], convert=T)
dataset$state.fullname[i]<- abb2state(dataset$State[i])
}
dataset$Gender[dataset$Gender=='M'] <- "Male"
dataset$Gender[dataset$Gender=='M/F'] <- "Male/Female"
dataset$Gender[is.na(dataset$Gender)] <- "Unknown"
dataset$Gender <- as.factor(dataset$Gender)
dataset$Race[is.na(dataset$Race) | dataset$Race=='unclear'] <- "Unknown"
dataset$Race[dataset$Race=='unclear'] <- "Unknown"
dataset$Race[dataset$Race=='White ' | dataset$Race=='white'| dataset$Race== "White"]<-  "White American or European American"
dataset$Race[dataset$Race=='black' | dataset$Race=='Black'|
dataset$Race=='Black American or African American/Unknown' ] <- "Black American or African American"
dataset$Race[dataset$Race=='Some other race'] <- "Other"
dataset$Race[dataset$Race=='Asian' | dataset$Race=='Asian American'] <- "Asian or American"
dataset$Race[dataset$Race=='Asian American/Some other race' |
dataset$Race=='White American or European American/Some other Race'] <- "Two or more races"
dataset$Mental.Health.Issues[dataset$Mental.Health.Issues == 'unknown' |
dataset$Mental.Health.Issues == 'Unclear '] <- 'Unknown'
dataset$Mental.Health.Issues <- as.factor(dataset$Mental.Health.Issues)
dataset$State <- as.factor(dataset$State)
dataset$state.abbreviated <- unlist(dataset$state.abbreviated)
dataset$state.abbreviated <- as.factor(dataset$state.abbreviated)
dataset$state.fullname <- unlist(dataset$state.fullname)
dataset$state.fullname <- as.factor(dataset$state.fullname)
math_error <- which(dataset$Total.victims != dataset$Fatalities + dataset$Injured)
math_error
View(dataset[math_error, c("Injured", "Fatalities", "Total.victims")])
dataset$Total.victims[math_error] <- rowSums(dataset[math_error, c("Injured", "Fatalities")])
math_error <- which(dataset$Total.victims != dataset$Fatalities + dataset$Injured)
math_error
duplicate_indexes <- which(duplicated(dataset[c('Date', 'State')]),)
duplicate_indexes
dataset <- dataset[!duplicated(dataset[c('Date', 'State')]),]
View(dataset)
install.packages("rserve")
install.packages("Rserve")
library(Rserve)
Rserve()
View(dataset)
save.image("D:/Learning/Data Science/Kaggle/US Mass Shootings/massshootingdataset.RData")
save(dataset, file="dataset.RData")
save(dataset, file="datasetObj.rdata")
Rserve()
duplicate_indexes <- which(duplicated(dataset[c('Date', 'State')]),)
duplicate_indexes
library(swirl)
swirl()
install_course("Data Analysis")
install_course("Open Intro")
min(dataset$Year)
max(dataset$Year)
